"""
Django settings for waxbadges2048 project.

Generated by 'django-admin startproject' using Django 2.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import environ
import socket
import json

import logging
logger = logging.getLogger(__name__)


env = environ.Env()

# reading .env file
environ.Env.read_env()

STAGE = env('STAGE')
if STAGE in ['dev', 'staging']:
    DEBUG = True
else:
    DEBUG = False


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_DIR = os.path.join(BASE_DIR, "waxbadges2048")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [env('LAMBDA_HOSTNAME'), '.waxbadges.com']
if STAGE == 'dev':
    ALLOWED_HOSTS += ['localhost', '127.0.0.1', '192.168.50.238', '192.168.5.136']
else:
    ALLOWED_HOSTS += socket.gethostbyname(socket.gethostname())

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.twitter',

    'django_extensions',

]


SITE_ID = 1


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'waxbadges2048.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(PROJECT_DIR, '_templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'waxbadges2048.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': env.db()
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'


WAX_URL = 'https://chain.wax.io'
WAX_CONTRACT = 'waxbadgesftw'
WAX_PRIVATE_KEY = env('WAX_PRIVATE_KEY')
WAX_ACCOUNT_NAME = env('WAX_ACCOUNT_NAME')
WAXBADGES_ECOSYSTEM_ID = env('WAXBADGES_ECOSYSTEM_ID')
WAXBADGES_EXPLORER_URL = 'https://explorer.waxbadges.com'

TWITTER_INTERNAL_CONSUMER_KEY = env('TWITTER_INTERNAL_CONSUMER_KEY')
TWITTER_INTERNAL_CONSUMER_SECRET = env('TWITTER_INTERNAL_CONSUMER_SECRET')
TWITTER_INTERNAL_ACCESS_TOKEN = env('TWITTER_INTERNAL_ACCESS_TOKEN')
TWITTER_INTERNAL_ACCESS_SECRET = env('TWITTER_INTERNAL_ACCESS_SECRET')

LOGIN_REDIRECT_URL = '/'
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = True

# Force allauth to do immediate logouts w/out intermediate confirmation page
ACCOUNT_LOGOUT_ON_GET = True


# AWS credentials
AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = 'waxbadges2048-static'

# Use the bucket's default ACL
AWS_DEFAULT_ACL = "public-read"

# Don't need authenticated S3 links
AWS_QUERYSTRING_AUTH = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/
STATICFILES_DIRS = (
    os.path.join(PROJECT_DIR, "_static"),
)


if STAGE in ['staging', 'production']:

    # Use the boto3 backend
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

    # Enable collectstatic to write to s3
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

    # Go through CloudFront
    STATIC_URL = 'https://waxbadges2048-static.s3.amazonaws.com/'
    AWS_S3_CUSTOM_DOMAIN = '2048-static.waxbadges.com'     # Point to the CloudFront cdn endpoint

else:
    # Serve locally with live updates
    STATIC_URL = '/static/'


"""****************************************************************************
    Logging
****************************************************************************"""
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'WARN',
        },
        'waxbadges2048': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
    },
}